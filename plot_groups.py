import data_processing as dp
import time
import numpy as np
import matplotlib.pyplot as plt

if __name__ == '__main__':
    start_time = time.time()
    np.random.seed(0)

    '''get data from multiple csv files and merge them into one pandas dataframe'''
    path = r'data'
    data = dp.get_multiple_csvs(path)
    data.fillna(method='ffill')
    comp_symbols = data.Name.unique()

    hclust_dtw = [5,6,3,0,0,5,6,6,0,5,0,0,7,5,0,5,5,7,0,5,0,5,0,0,6,0,0,0,3,5,5,0,3,3,6,6,2,6,3,6,5,0,0,6,0,
                     0,0,5,5,3,3,0,0,0,3,2,5,5, 5, 3, 5, 5, 3, 5, 1, 5, 1, 5, 0, 5, 0, 6, 5, 0, 0, 0, 0, 6, 0,
                     5, 5, 6, 0, 5, 5, 0, 7, 0, 3, 6, 0, 0, 5, 6, 4, 6, 5, 5, 5, 0, 5, 3, 0, 3, 5, 5, 5, 5, 6,
                     5, 0, 0, 0, 0, 6, 0, 5, 0, 0, 0, 5, 0, 5, 5, 0, 0, 0, 0, 5, 0, 0, 0, 0, 5, 5, 0, 5, 0, 0,
                     5, 0, 5, 5, 5, 2, 2, 5, 0,5, 5, 0, 5, 0, 5, 7, 5, 3, 5, 5, 5, 5, 0, 5, 3, 0, 5, 1, 5, 5,
                     3, 5, 5, 6, 0, 5]
    kmeans_zscore = [6, 3, 3, 0, 0, 6, 3, 3, 0, 6, 0, 0, 2, 6, 0, 6, 6, 2, 0, 6, 0, 6, 0, 0, 3, 0, 0, 0, 3, 6, 6,
                     0, 3, 3, 3, 3, 1, 3, 3, 3, 6, 0, 0, 3, 0, 0, 0, 6, 6, 3, 3, 0, 0, 0, 3, 5, 6, 6, 6, 3, 6, 6,
                     3, 6, 2, 6, 2, 6, 0, 6, 6, 3, 6, 0, 0, 0, 0, 3, 0, 6, 6, 3, 0, 6, 6, 0, 2, 0, 3, 3, 0, 0, 6,
                     0, 7, 3, 6, 6, 6, 0, 6, 3, 0, 3, 6, 6, 6, 6, 3, 6, 0, 0, 0, 0, 3, 0, 6, 0, 0, 0, 6, 0, 6, 6,
                     0, 0, 0, 0, 6, 0, 0, 0, 6, 6, 6, 0, 6, 0, 0, 6, 0, 6, 6, 6, 4, 4, 6, 0, 6, 6, 0, 6, 0, 6, 2,
                     6, 3, 6, 6, 6, 6, 0, 6, 3, 0, 6, 2, 6, 6, 3, 6, 6, 3, 0, 6]
    kmeans_dtw = [5, 4, 2, 1, 1, 5, 4, 4, 1, 5, 4, 1, 7, 5, 1, 5, 5, 7, 1, 5, 1, 1, 1, 1, 4, 1, 1, 1, 2, 5, 5, 1,
                   2, 2, 4, 4, 0, 4, 2, 4, 5, 1, 1, 4, 1, 1, 4, 5, 5, 2, 2, 1, 1, 1, 2, 0, 5, 5, 5, 2, 5, 5, 2, 5,
                   3, 5, 3, 5, 1, 5, 5, 4, 5, 1, 4, 1, 1, 4, 1, 5, 5, 4, 1, 5, 5, 1, 7, 1, 2, 4, 1, 1, 5, 4, 6, 4,
                   5, 5, 5, 1, 5, 2, 1, 2, 5, 5, 5, 5, 4, 5, 1, 1, 1, 4, 4, 1, 5, 4, 1, 1, 5, 1, 5, 5, 1, 1, 1, 1,
                   5, 1, 1, 1, 5, 5, 5, 1, 5, 1, 1, 5, 1, 1, 5, 5, 0, 0, 5, 1, 5, 5, 1, 5, 4, 5, 7, 5, 2, 1, 5, 1,
                   5, 1, 5, 2, 4, 5, 3, 5, 5, 2, 5, 5, 4, 1, 5]

    hclust = [2, 0, 0, 6, 6, 2, 0, 0, 6, 2, 6, 6, 1, 2, 6, 2, 2, 1, 2, 2, 6, 2, 6, 6, 0, 6, 6, 6, 0, 2, 2, 6, 0,
              0, 0, 0, 5, 0, 0, 0, 2, 6, 6, 0, 6, 6, 6, 2, 2, 0, 0, 6, 6, 6, 0, 7, 2, 2, 2, 0, 2, 2, 0, 2, 1, 2,
              1, 2, 2, 2, 6, 0, 2, 6, 6, 6, 2, 0, 6, 2, 2, 0, 6, 2, 2, 6, 1, 6, 0, 0, 6, 6, 2, 0, 4, 0, 2, 2, 2,
              6, 2, 0, 6, 0, 2, 2, 2, 2, 0, 2, 6, 6, 6, 0, 0, 6, 2, 6, 6, 6, 2, 6, 2, 2, 6, 6, 6, 6, 2, 6, 6, 6,
              6, 2, 2, 6, 2, 6, 6, 2, 6, 2, 2, 2, 3, 3, 2, 6, 2, 2, 6, 2, 0, 2, 1, 2, 0, 2, 2, 2, 2, 6, 2, 0, 6,
              2, 1, 2, 2, 0, 2, 2, 0, 2, 2]


    clusters = dp.get_clusters(hclust,comp_symbols)
    for li in clusters:
        adj_close_series = dp.col_as_ts(data, li, col='Adj Close', normalization=None)
        plt.plot(adj_close_series.T, linewidth=1, markersize=1)
        plt.plot(np.mean(adj_close_series, axis=0), linestyle='dashed', linewidth=4, markersize=20, color='k')
        plt.title("Cluster {}".format(clusters.index(li)+1))
        plt.ylabel("Price")
        plt.xlabel("Time")
        plt.show()

